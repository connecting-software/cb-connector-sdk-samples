using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using CBTestConnector.Command.Translator;
using CBTestConnector.Command.Visitors;
using CBTestConnector.Connector;
using MG.CB.Command.DataHandler;
using MG.CB.Command.DataHandler.Argument;
using MG.CB.Command.Interfaces;
using MG.CB.Metadata.DataModel.Dataware.Interfaces;
using MG.CB.Metadata.MetaModel.Interfaces;
using SqlCommandBuilder = CBTestConnector.Command.Builder.SqlCommandBuilder;

namespace CBTestConnector.Command.Handlers
{
    public class InsertSinkHandler : InsertSink, IHandler
    {
        public InsertSinkHandler(ExecutionSession session)
        {
            Session = session;
        }

        protected ExecutionSession Session { get; }

        protected override bool OnInit()
        {
            return true;
        }

        public override void Execute(IResultSetLoader loader, IExecutionContext context)
        {
            ExecuteInternal(loader, context);
            //Prepares Sql Command
            var sqlCommandBuilder = new SqlCommandBuilder(Session.CommandInfo);
            var batch = sqlCommandBuilder.GetInsertCommand();
            //Performs request to Data Source
            var metadata = DataHandlerVisitor.Instance.Visit(this) as ITable;
            Debug.Assert(metadata != null, "metadata != null");

            //Applies SCOPE_IDENTITY: Returns the last identity value inserted into an identity column in the same scope. 
            ColumnSource columnSource = null;
            var autoGeneratedColumn = metadata.Columns.FirstOrDefault(_ => _.IsAutoincrementable);
            bool hasAutoGeneratedColumn = autoGeneratedColumn != null;
            if (hasAutoGeneratedColumn) columnSource = new ColumnSource(autoGeneratedColumn);
            ITableResultLoader scopeIds = null;
            if (hasAutoGeneratedColumn)
            {
                //Opens an ITableResultLoader object for writing. 
                scopeIds = context.OpenScopeIdentityLoader(columnSource);
            }
            try
            {
                using (SqlConnection conn = new SqlConnection(Session.ConnectionString))
                {
                    conn.Open();
                    int affectedRows = 0;
                    foreach (var queryString in batch)
                    {
                        var query = hasAutoGeneratedColumn
                            ? $"{queryString} SELECT SCOPE_IDENTITY() AS [{columnSource.Name}];"
                            : queryString;
                        using (SqlCommand sqlCommand = new SqlCommand(query, conn))
                        {
                            //Retrieves a list of the variables (i.e. @ parameters).
                            var variables = context.GetAllVariables().ToList();
                            variables.ForEach(v =>
                            {
                                sqlCommand.Parameters.Add(new SqlParameter(v.Name, context.GetVariableValue(v)));
                            });

                            using (SqlDataReader reader = sqlCommand.ExecuteReader())
                            {
                                if (reader.RecordsAffected > 0)
                                {
                                    if (scopeIds != null)
                                    {
                                        if (reader.HasRows)
                                        {
                                            while (reader.Read() &&
                                                   !scopeIds.CancellationToken.IsCancellationRequested)
                                            {
                                                //Create a new ITableResultRow instance
                                                ITableResultRow row = scopeIds.NewRow();
                                                //Gets the values in the row, one per column.
                                                reader.GetValues(row.GetValues());
                                                //Adds a row to the ITableResultLoader.
                                                scopeIds.Add(row);
                                            }
                                        }
                                    }
                                }

                                affectedRows += reader.RecordsAffected;
                            }
                        }
                    }
                    //Returns an empty result with the the number of rows inserted by execution of the Transact-SQL statement.
                    loader.ReturnEmptyResult(null, affectedRows, null);
                }
            }
            finally
            {
                scopeIds?.Dispose();
            }
        }

        public void ExecuteInternal(IResultSetLoader loader, IExecutionContext context)
        {
            //Calls for data from directly connected handler
            if (Previous != null && Previous is IHandler handler) handler.ExecuteInternal(loader, context);
            //Handles the INSERT in a parsed statement.
            Session.CommandInfo.Insert = new Insert();
            foreach (var argument in Arguments.Columns)
            {
                Session.CommandInfo.Insert.Fields.Add(SqlTranslator.Instance.Translate(argument, context));
            }
            foreach (var argument in Arguments.Values.Args)
            {
                Session.CommandInfo.Insert.Values.Add($"({SqlTranslator.Instance.Translate(argument, context)})");
            }
        }
    }
}